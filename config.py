# -*- coding: utf-8 -*-

import fitz
import os
import re
import pandas as pd
import openpyxl as xl
import psycopg2 as sql
import datetime as dt
from urllib.request import urlretrieve as download, urlopen as openurl
from requests import get
from threading import Thread, Lock
from bs4 import BeautifulSoup
from time import sleep
from shutil import rmtree as delete


def today():
    return dt.datetime.today() + dt.timedelta(hours=3)


class Bus:
    def __init__(self,
                 timeOfD: list, weekday: str, direction: str,
                 isSlavyanka: bool = False, isAccurate: bool = True):
        self.timeOfDeparture = dt.datetime(year=today().year,
                                           month=today().month,
                                           day=today().day,
                                           hour=timeOfD[0],
                                           minute=timeOfD[1])
        if not isAccurate:
            self.timeOfDeparture += dt.timedelta(minutes=15)
        if timeOfD[0] in (0, 1, 2):
            self.timeOfDeparture += dt.timedelta(days=1)
        self.timeOfArrival = dt.datetime(year=today().year,
                                         month=today().month,
                                         day=today().day,
                                         hour=timeOfD[0],
                                         minute=timeOfD[1]) + \
            dt.timedelta(minutes=15)
        self.weekday = weekday
        self.direction = direction
        self.isSlavyanka = isSlavyanka
        self.isAccurate = isAccurate
        self.trains = []

    def __str__(self):
        toPrint = '–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é {}:{}' if self.isAccurate \
            else '–ø–æ –ø—Ä–∏–±—ã—Ç–∏–∏ ~ {}:{}'
        hour, minute = self.timeOfDeparture.hour, self.timeOfDeparture.minute
        hour = str(hour) if len(str(hour)) == 2 else '0' + str(hour)
        minute = str(minute) if len(str(minute)) == 2 else '0' + str(minute)
        toPrint = toPrint.format(hour, minute)
        toPrint = toPrint if not self.isSlavyanka \
                          else toPrint + ' (—Å–ª–∞–≤—è–Ω–∫–∞)'
        return toPrint

    def __eq__(self, other):
        if isinstance(other, Bus):
            if self.timeOfDeparture == other.timeOfDeparture:
                return True

    def __lt__(self, other):
        if isinstance(other, Bus):
            if self.timeOfDeparture < other.timeOfDeparture:
                return True
            else:
                return False
        elif isinstance(other, dt.datetime):
            if self.timeOfDeparture < other:
                return True
            else:
                return False

    def __gt__(self, other):
        if isinstance(other, Bus):
            if self.timeOfDeparture > other.timeOfDeparture:
                return True
            else:
                return False
        elif isinstance(other, dt.datetime):
            if self.timeOfDeparture > other:
                return True
            else:
                return False

    def busToPrint(self, forWhat: str = 'buses', delta=None):
        toPrint = 'üöå *{}:{}*' if self.isAccurate \
            else 'üöå –ø–æ –ø—Ä–∏–±—ã—Ç–∏–∏ ~ *{}:{}*'
        hour, minute = self.timeOfDeparture.hour, self.timeOfDeparture.minute
        hour = str(hour) if len(str(hour)) == 2 else '0' + str(hour)
        minute = str(minute) if len(str(minute)) == 2 else '0' + str(minute)
        toPrint = toPrint.format(hour, minute)
        if forWhat == 'slavyanki':
            return toPrint
        toPrint = toPrint if not self.isSlavyanka \
            else toPrint + ' (*—Å–ª–∞–≤—è–Ω–∫–∞*)'
        toPrint += delta
        if len(self.trains) > 0:
            toPrint += '\n—É–¥–æ–±–Ω—ã–µ –ø–µ—Ä–µ—Å–∞–¥–∫–∏:'
            for train in self.trains:
                if train.mainTime >= today():
                    toPrint += '\n' + train.trainToPrint(forWhat='buses')
        return toPrint


class BusesCurriculum:
    def __init__(self):
        self.weekCurriculum = None
        self.satCurriculum = None
        self.sunCurriculum = None
        self.linkToPDF = None

    def getPdf(self):
        """ –ù–∞—Ö–æ–¥–∏—Ç pdf-—Ñ–∞–π–ª —Å —Ç–µ–∫—É—â–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏–∑ –∫–Ω–æ–ø–∫–∏ '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ' –≤
            –≥—Ä—É–ø–ø–µ –î—É–±–∫–æ–≤ ('https://vk.com/dubki') –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Ñ–∞–π–ª
            –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ.pdf
        """
        groupPage = BeautifulSoup(openurl('https://vk.com/dubki'),
                                  features='html.parser')
        for a in groupPage.find_all('a', href=True):
            if '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ' in str(a):
                linkToPDF = a['href']
                download(linkToPDF, filename='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ.pdf')
                break
        self.linkToPDF = linkToPDF
        self.pdfToTxt()

    @staticmethod
    def pdfToTxt():
        """ –î–æ—Å—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ pdf-—Ñ–∞–π–ª–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º (–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ.pdf),
            —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é)
            –≤ txt-—Ñ–∞–π–ª mon-fri.txt, –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—É–±–±–æ—Ç—É –∏
            –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ) –≤ txt-—Ñ–∞–π–ª sat-sun.txt (—Ñ–∞–π–ª—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ txt/)
        """
        os.mkdir(os.getcwd() + '/txt')
        pdfDocument = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ.pdf'
        doc = fitz.open(pdfDocument)
        for i in range(2):
            page = doc.loadPage(i)
            text = page.getText('text')
            pathToSave = 'txt/mon-fri.txt' if i == 0 else 'txt/sat-sun.txt'
            with open(pathToSave, 'w', encoding='utf8') as f:
                print(text, file=f)

    def createCurriculum(self):
        """ –ü–∞—Ä—Å–∏—Ç txt-—Ñ–∞–π–ª—ã mon-fri.txt –∏ sat-sun.txt (–∏–∑ –ø–∞–ø–∫–∏ txt/)
            –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–∏ —Å "—Å—ã—Ä—ã–º" —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä—ã–µ
            –≤–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—Ç—Å—è –≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—ã pandas —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            –Ω–∞ –±—É–¥–Ω–∏–µ –¥–Ω–∏, —Å—É–±–±–æ—Ç—É –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        """
        DtoO = True
        DtoOweekTimes, OtoDweekTimes = [], []
        DtoOsatTimes, OtoDsatTimes = [], []
        DtoOsunTimes, OtoDsunTimes = [], []
        toPutDtoO = {'week': DtoOweekTimes,
                     'sat': DtoOsatTimes,
                     'sun': DtoOsunTimes}
        toPutOtoD = {'week': OtoDweekTimes,
                     'sat': OtoDsatTimes,
                     'sun': OtoDsunTimes}
        weekday = ['week', 'sat', 'sun']
        indexOfWeekday = 0

        for file in 'mon-fri.txt', 'sat-sun.txt':
            if file == 'sat-sun.txt':
                indexOfWeekday += 1
            with open('txt/{}'.format(file), 'r', encoding='utf8') as f:
                listOfLines = []
                lineOf3Pairs = [(1000, 1000) for i in range(3)]
                numOfVacantPlace = 0
                for line in f:
                    predict = False
                    slavyanka = False
                    line = line.strip()
                    if line == '–ø–æ –ø—Ä–∏–±—ã—Ç.':
                        predict = True
                        hours, minutes = dubki[0]
                        time = [hours, minutes]
                    elif line == '----':
                        time = [404, 404]
                    elif re.search(pattern=r'\d\d:\d\d',
                                   string=line) is not None or \
                            re.search(pattern=r'\d:\d\d',
                                      string=line) is not None:
                        if line[-2:] == '**':
                            slavyanka = True
                            line = line[:-2]
                        elif line[-1] == '*':
                            slavyanka = True
                            line = line[:-1]
                        line = list(map(int, line.split(':')))
                        hours, minutes = int(line[0]), int(line[1])
                        time = [hours, minutes]
                    else:
                        continue
                    if DtoO:
                        DtoO = False
                        dubki = (time, predict, slavyanka)
                    else:
                        DtoO = True
                        lineOf3Pairs[numOfVacantPlace] = (dubki,
                                                          (time, predict, slavyanka))
                        numOfVacantPlace += 1

                    if numOfVacantPlace == 3:
                        for pair in lineOf3Pairs:
                            if pair[0][0][0] in {0, 1, 2, 3, 4}:
                                pair[0][0][0] += 24
                        lineOf3Pairs.sort()
                        for pair in lineOf3Pairs:
                            if pair[0][0][0] in {24, 25, 26, 27, 28}:
                                pair[0][0][0] -= 24
                        listOfLines.append(lineOf3Pairs)
                        lineOf3Pairs = [(1000, 1000) for i in range(3)]
                        numOfVacantPlace = 0

                valOfPreLineInFirstPos = 0
                for line in listOfLines:
                    firstPosOfLine = line[0][0][0][0]
                    if firstPosOfLine < valOfPreLineInFirstPos:
                        indexOfWeekday += 1
                    valOfPreLineInFirstPos = firstPosOfLine
                    for pair in line:
                        toPutDtoO[weekday[indexOfWeekday]].append(pair[0])
                        toPutOtoD[weekday[indexOfWeekday]].append(pair[1])

        self.weekCurriculum = self.listsTopdDataframe(DtoOweekTimes,
                                                      OtoDweekTimes,
                                                      weekday='week')
        self.satCurriculum = self.listsTopdDataframe(DtoOsatTimes,
                                                     OtoDsatTimes,
                                                     weekday='sat')
        self.sunCurriculum = self.listsTopdDataframe(DtoOsunTimes,
                                                     OtoDsunTimes,
                                                     weekday='sun')

        delete(os.getcwd() + '/txt')

    @staticmethod
    def listsTopdDataframe(timesDubki: list, timesOdintsovo: list,
                           weekday: str):
        """ –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–∫–∏ —Å "—Å—ã—Ä—ã–º" —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–æ–≤ –≤
            –¥–∞—Ç–∞—Ñ—Ä–µ–π–º pandas, –∫–∞–∂–¥–∞—è —è—á–µ–π–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–ª–∞—Å—Å—É Bus
            –∏–ª–∏ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ NaN, –ø—Ä–∏ —ç—Ç–æ–º —Ç–∞–±–ª–∏—Ü–∞ –∏–º–µ–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∏–¥
        """
        times = {'–î—É–±–∫–∏-–û–¥–∏–Ω—Ü–æ–≤–æ': [], '–û–¥–∏–Ω—Ü–æ–≤–æ-–î—É–±–∫–∏': []}
        for timetable in timesDubki, timesOdintsovo:
            for line in timetable:
                direction = '–î—É–±–∫–∏-–û–¥–∏–Ω—Ü–æ–≤–æ' if timetable is timesDubki \
                            else '–û–¥–∏–Ω—Ü–æ–≤–æ-–î—É–±–∫–∏'
                if line[0] != [404, 404]:
                    bus = Bus(timeOfD=line[0],
                              weekday=weekday,
                              direction=direction,
                              isAccurate=not line[1],
                              isSlavyanka=line[2])
                    times[direction].append(bus)
            times[direction].sort()
        curriculum = pd.concat(
            [pd.DataFrame({'–î—É–±–∫–∏-–û–¥–∏–Ω—Ü–æ–≤–æ': times['–î—É–±–∫–∏-–û–¥–∏–Ω—Ü–æ–≤–æ']}),
             pd.DataFrame({'–û–¥–∏–Ω—Ü–æ–≤–æ-–î—É–±–∫–∏': times['–û–¥–∏–Ω—Ü–æ–≤–æ-–î—É–±–∫–∏']})],
            axis=1)
        return curriculum

    def getBusesForHour(self, direction: str):
        """ –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∞–≤—Ç–æ–±—É—Å—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –±–ª–∏–∂–∞–π—à–µ–≥–æ —á–∞—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
            —Å–ø–∏—Å–æ–∫ –∏–∑ —ç—Ç–∏—Ö –∞–≤—Ç–æ–±—É—Å–æ–≤ –∫–ª–∞—Å—Å–∞ Bus
        """
        start = today()
        end = start + dt.timedelta(hours=1)
        relevantCurriculum = self.getRelevantCurriculum()
        relevantBuses = []
        for bus in relevantCurriculum[direction]:
            if not isinstance(bus, Bus):
                continue
            if start < bus.timeOfDeparture < end or \
                    start + dt.timedelta(days=1) < bus.timeOfDeparture < end + dt.timedelta(days=1):
                delta = abs((start.hour * 60 + start.minute) -
                            (bus.timeOfDeparture.hour * 60 + bus.timeOfDeparture.minute))
                if delta > 60:
                    delta = 60 - delta % 60
                textDelta = ' ‚Äì —á–µ—Ä–µ–∑ {}'
                if delta == 60:
                    addDelta = textDelta.format('1 —á–∞—Å')
                elif delta == 0:
                    addDelta = ' ‚Äì —Å–µ–π—á–∞—Å'
                elif 11 <= delta <= 19:
                    addDelta = textDelta.format('{} –º–∏–Ω—É—Ç'.format(delta))
                elif delta % 10 == 1:
                    addDelta = textDelta.format('{} –º–∏–Ω—É—Ç—É'.format(delta))
                elif delta % 10 in [2, 3, 4]:
                    addDelta = textDelta.format('{} –º–∏–Ω—É—Ç—ã'.format(delta))
                elif delta % 10 in [5, 6, 7, 8, 9, 0]:
                    addDelta = textDelta.format('{} –º–∏–Ω—É—Ç'.format(delta))
                relevantBuses.append(bus.busToPrint(delta=addDelta))
        return relevantBuses

    def getSlavyanki(self, direction: str):
        relevantCurriculum = self.getRelevantCurriculum()
        relevantBuses = []
        for bus in relevantCurriculum[direction]:
            if not isinstance(bus, Bus):
                continue
            if bus.isSlavyanka and today() < bus.timeOfDeparture:
                relevantBuses.append(bus.busToPrint(forWhat='slavyanki'))
        return relevantBuses

    def getRelevantCurriculum(self):
        if today().isoweekday() in (1, 2, 3, 4, 5) or today().isoweekday() == 5 \
                and today().hour in (0, 1, 2):
            relevantCurriculum = self.weekCurriculum
        elif today().isoweekday() == 6 or today().isoweekday() == 6 \
                and today().hour in (0, 1, 2):
            relevantCurriculum = self.satCurriculum
        elif today().isoweekday() == 7 or today().isoweekday() == 7 \
                and today().hour in (0, 1, 2):
            relevantCurriculum = self.sunCurriculum
        return relevantCurriculum


class Train:
    def __init__(self,
                 time: list,  direction: str, name: str, type: str,
                 nextDay: bool = False):
        suburbanTypes = {'stdplus': '–°—Ç–∞–Ω–¥–∞—Ä—Ç –ø–ª—é—Å',
                         'suburban': '–û–±—ã—á–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∞',
                         'rex': '–≠–∫—Å–ø—Ä–µ—Å—Å –†–≠–ö–°',
                         'mcd1': '–ò–≤–æ–ª–≥–∞',
                         'aerstd': '–ê—ç—Ä–æ—ç–∫—Å–ø—Ä–µ—Å—Å'}
        self.mainTime = dt.datetime(year=today().year,
                                    month=today().month,
                                    day=today().day,
                                    hour=time[0],
                                    minute=time[1])
        self.direction = direction
        if nextDay:
            self.mainTime += dt.timedelta(days=1)
        self.suburbanName = name
        self.suburbanType = suburbanTypes[type]
        self.stops = {}
        self.buses = {'week': [],
                      'sat': [],
                      'sun': []}

    def __str__(self):
        hour = self.mainTime.hour if len(str(self.mainTime.hour)) == 2 \
            else '0' + str(self.mainTime.hour)
        minute = self.mainTime.minute if len(str(self.mainTime.minute)) == 2 \
            else '0' + str(self.mainTime.minute)
        toPrint = '{} ({}) ‚Äì {}:{}\n'.format(self.suburbanName,
                                          self.suburbanType,
                                          hour, minute)
        for station in self.stops:
            hour = self.stops[station].hour if len(str(self.stops[station].hour)) == 2 \
                else '0' + str(self.stops[station].hour)
            minute = self.stops[station].minute if len(str(self.stops[station].minute)) == 2 \
                else '0' + str(self.stops[station].minute)
            toPrint += '{} ‚Äì {}:{} '.format(station, hour, minute)
        return toPrint

    def __eq__(self, other):
        if isinstance(other, Train):
            if self.mainTime == other.mainTime:
                return True
            else:
                return False

    def __lt__(self, other):
        if isinstance(other, Train):
            if self.mainTime < other.mainTime:
                return True
            else:
                return False
        elif isinstance(other, dt.datetime):
            if self.mainTime < other:
                return True
            else:
                return False

    def __gt__(self, other):
        if isinstance(other, Train):
            if self.mainTime > other.mainTime:
                return True
            else:
                return False
        elif isinstance(other, dt.datetime):
            if self.mainTime > other:
                return True
            else:
                return False

    def trainToPrint(self, forWhat: str = 'buses', station: str = None):
        if forWhat == 'buses':
            hour = self.mainTime.hour if len(str(self.mainTime.hour)) == 2 \
                else '0' + str(self.mainTime.hour)
            minute = self.mainTime.minute if len(str(self.mainTime.minute)) == 2 \
                else '0' + str(self.mainTime.minute)
            toPrint = 'üöÜ *{}:{} ‚Äì {}:\n*'.format(hour, minute,
                                             self.suburbanName)
            stations = ('–ö—É–Ω—Ü–µ–≤–æ', '–§–∏–ª–∏', '–ë–µ–≥–æ–≤–∞—è', '–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –≤–æ–∫–∑–∞–ª') if self.direction == '–û–¥–∏–Ω—Ü–æ–≤–æ-–ú–æ—Å–∫–≤–∞' \
                else ('–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –≤–æ–∫–∑–∞–ª', '–ë–µ–≥–æ–≤–∞—è', '–§–∏–ª–∏', '–ö—É–Ω—Ü–µ–≤–æ')
            for station in stations:
                if station in self.stops:
                    hour = self.stops[station].hour if len(str(self.stops[station].hour)) == 2 \
                        else '0' + str(self.stops[station].hour)
                    minute = self.stops[station].minute if len(str(self.stops[station].minute)) == 2 \
                        else '0' + str(self.stops[station].minute)
                    toPrint += '*{}* ‚Äì {}:{}, '.format(station,
                                                       hour,
                                                       minute)
            toPrint = toPrint[:-2]
        elif forWhat == 'trains':
            toPrint = 'üöÜ *{}* ({})'.format(self.suburbanName,
                                            self.suburbanType)
            toPrint += ':\n–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ *{}:{}*, –ø—Ä–∏–±—ã—Ç–∏–µ –≤ *{}:{}*'
            departureHour = self.mainTime.hour if len(str(self.mainTime.hour)) == 2 \
                else '0' + str(self.mainTime.hour)
            departureMinute = self.mainTime.minute if len(str(self.mainTime.minute)) == 2 \
                else '0' + str(self.mainTime.minute)
            arrivalHour = self.stops[station].hour if len(str(self.stops[station].hour)) == 2 \
                else '0' + str(self.stops[station].hour)
            arrivalMinute = self.stops[station].minute if len(str(self.stops[station].minute)) == 2 \
                else '0' + str(self.stops[station].minute)
            if self.direction == '–ú–æ—Å–∫–≤–∞-–û–¥–∏–Ω—Ü–æ–≤–æ':
                departureHour, arrivalHour = arrivalHour, departureHour
                departureMinute, arrivalMinute = arrivalMinute, departureMinute
            toPrint = toPrint.format(departureHour, departureMinute,
                                     arrivalHour, arrivalMinute)

        return toPrint


class TrainsCurriculum:
    def __init__(self):
        self.suburbanCurriculum = None
        self.trains = None

    def makeRequest(self, stationFrom: str, stationTo: str,
                    direction: str, nextDay: bool = False):
        stations = {'–û–¥–∏–Ω—Ü–æ–≤–æ': 'c10743',
                    '–ö—É–Ω—Ü–µ–≤–æ': 's9601728',
                    '–§–∏–ª–∏': 's9600821',
                    '–ë–µ–≥–æ–≤–∞—è': 's9601666',
                    '–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –≤–æ–∫–∑–∞–ª': 's2000006'}
        apikey = os.getenv('APIKEY_YANDEX')
        url = 'https://api.rasp.yandex.net/v3.0/search/?apikey={}&from={}&to={}&date={}'
        default = '&format=json&limit=1000&lang=ru_RU&system=yandex&show_systems=yandex'
        now = today()
        if nextDay:
            now += dt.timedelta(days=1)
        relevantTrains = []

        response = get(url.format(apikey,
                                  stations[stationFrom],
                                  stations[stationTo],
                                  now.date())
                       + default).json()
        if 'error' not in response:
            trains = response['segments']
            amountOfTrains = 0
            for train in trains:
                amountOfTrains += 1
                begin, end = train['departure'].find('T') + 1, \
                             train['departure'].find('T') + 6
                departureTime = train['departure'][begin:end]
                departureTime = list(map(int, departureTime.split(':')))
                begin, end = train['arrival'].find('T') + 1, \
                             train['arrival'].find('T') + 6
                arrivalTime = train['arrival'][begin:end]
                arrivalTime = list(map(int, arrivalTime.split(':')))
                if direction == '–û–¥–∏–Ω—Ü–æ–≤–æ-–ú–æ—Å–∫–≤–∞':
                    time = departureTime
                    stopTime = arrivalTime
                    stop = stationTo
                elif direction == '–ú–æ—Å–∫–≤–∞-–û–¥–∏–Ω—Ü–æ–≤–æ':
                    time = arrivalTime
                    stopTime = departureTime
                    stop = stationFrom
                if (time[0] in {0, 1, 2} or stopTime[0] in {0, 1, 2}) and \
                        amountOfTrains >= 30:
                    continue

                mainTime = dt.datetime(year=now.year,
                                       month=now.month,
                                       day=now.day,
                                       hour=time[0],
                                       minute=time[1])
                suburbanName = train['thread']['title']
                if suburbanName == '–ú–æ—Å–∫–≤–∞ (–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –≤–æ–∫–∑–∞–ª) ‚Äî –û–¥–∏–Ω—Ü–æ–≤–æ':
                    suburbanName = '–õ–æ–±–Ω—è ‚Äî –û–¥–∏–Ω—Ü–æ–≤–æ'
                suburbanType = train['thread']['transport_subtype']['code']

                found = False
                for tr in self.trains:
                    if tr.suburbanName == suburbanName and \
                       tr.mainTime == mainTime:
                        tr.stops[stop] = dt.datetime(year=now.year,
                                                     month=now.month,
                                                     day=now.day,
                                                     hour=stopTime[0],
                                                     minute=stopTime[1])
                        found = True
                        break
                if not found:
                    currentTrain = Train(time, direction,
                                         suburbanName, suburbanType, nextDay=nextDay)
                    currentTrain.stops[stop] = dt.datetime(year=now.year,
                                                           month=now.month,
                                                           day=now.day,
                                                           hour=stopTime[0],
                                                           minute=stopTime[1])
                    relevantTrains.append(currentTrain)
        return relevantTrains

    def createCurriculum(self):
        df = pd.DataFrame({'nothing': [1, 2, 3]})
        for departure in '–û–¥–∏–Ω—Ü–æ–≤–æ', '–ú–æ—Å–∫–≤–∞':
            self.trains = []
            direction = '{}-{}'.format(departure,
                                           '–ú–æ—Å–∫–≤–∞' if departure == '–û–¥–∏–Ω—Ü–æ–≤–æ'
                                            else '–û–¥–∏–Ω—Ü–æ–≤–æ')
            for station in ['–ö—É–Ω—Ü–µ–≤–æ', '–§–∏–ª–∏', '–ë–µ–≥–æ–≤–∞—è', '–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –≤–æ–∫–∑–∞–ª']:
                start = station if departure == '–ú–æ—Å–∫–≤–∞' else '–û–¥–∏–Ω—Ü–æ–≤–æ'
                stop = station if departure == '–û–¥–∏–Ω—Ü–æ–≤–æ' else '–û–¥–∏–Ω—Ü–æ–≤–æ'
                self.trains += self.makeRequest(stationFrom=start,
                                                stationTo=stop,
                                                direction=direction)
                self.trains += self.makeRequest(stationFrom=start,
                                                stationTo=stop,
                                                direction=direction,
                                                nextDay=True)
            self.trains.sort()
            df = pd.concat([df, pd.DataFrame({direction: self.trains})],
                           axis=1,
                           sort=True)
        self.suburbanCurriculum = df.drop(['nothing'], axis=1)

    def getTrainsForHour(self, direction: str):
        start = today()
        end = today() + dt.timedelta(hours=1)
        station = direction.replace('–û–¥–∏–Ω—Ü–æ–≤–æ', '').replace('-', '')
        direction = '–û–¥–∏–Ω—Ü–æ–≤–æ-–ú–æ—Å–∫–≤–∞' if direction in \
                                         ('–û–¥–∏–Ω—Ü–æ–≤–æ-–ö—É–Ω—Ü–µ–≤–æ', '–û–¥–∏–Ω—Ü–æ–≤–æ-–§–∏–ª–∏', '–û–¥–∏–Ω—Ü–æ–≤–æ-–ë–µ–≥–æ–≤–∞—è', '–û–¥–∏–Ω—Ü–æ–≤–æ-–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –≤–æ–∫–∑–∞–ª') \
            else '–ú–æ—Å–∫–≤–∞-–û–¥–∏–Ω—Ü–æ–≤–æ'
        relevantTrains = []
        for train in self.suburbanCurriculum[direction]:
            if not isinstance(train, Train):
                continue
            if station in train.stops:
                trainTime = train.mainTime if direction == '–û–¥–∏–Ω—Ü–æ–≤–æ-–ú–æ—Å–∫–≤–∞' else train.stops[station]
                if start < trainTime < end or \
                        start + dt.timedelta(days=1) < trainTime < end + dt.timedelta(days=1) \
                        and start.hour in (23, 0, 1, 2):
                    relevantTrains.append(train.trainToPrint(forWhat='trains',
                                                             station=station))
        return relevantTrains


class Config:
    def __init__(self):
        self.busesCurriculum = BusesCurriculum()
        self.trainsCurriculum = TrainsCurriculum()
        self.lastUpdate = today()

    @staticmethod
    def createDataBase():
        """ –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Postgresql (–Ω–∞ Heroku), —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ
        –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ 0
        """
        con = sql.connect(os.getenv('DATABASE_URL'),
                          sslmode='require')
        cur = con.cursor()
        # —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã full_statistics
        cur.execute('''CREATE TABLE FULL_STATISTICS
                    (date TEXT PRIMARY KEY,
                    start_calls INT,
                    help_calls INT,
                    buses_calls INT,
                    slavyanki_calls INT,
                    trains_calls INT,
                    file_calls INT,
                    total_calls INT);''')
        # —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users_statistics
        cur.execute('''CREATE TABLE USERS_STATISTICS
                    (id INT PRIMARY KEY NOT NULL,
                    start_date TEXT,
                    lastcall_date TEXT,
                    total_calls INT);''')
        con.commit()
        con.close()

    def linkBusesAndTrains(self):
        for daysCurriculum in [self.busesCurriculum.weekCurriculum,
                               self.busesCurriculum.satCurriculum,
                               self.busesCurriculum.sunCurriculum]:
            if daysCurriculum is self.busesCurriculum.sunCurriculum:
                a = 1
            for directionBuses in daysCurriculum:
                for bus in daysCurriculum[directionBuses]:
                    if not isinstance(bus, Bus) or bus.isSlavyanka:
                        continue
                    directionTrains = '–û–¥–∏–Ω—Ü–æ–≤–æ-–ú–æ—Å–∫–≤–∞' if directionBuses == '–î—É–±–∫–∏-–û–¥–∏–Ω—Ü–æ–≤–æ' \
                                      else '–ú–æ—Å–∫–≤–∞-–û–¥–∏–Ω—Ü–æ–≤–æ'
                    trainsForBus = []
                    for train in self.trainsCurriculum.suburbanCurriculum[directionTrains]:
                        if not isinstance(train, Train):
                            continue
                        delta = train.mainTime - bus.timeOfArrival if directionBuses == '–î—É–±–∫–∏-–û–¥–∏–Ω—Ü–æ–≤–æ' \
                                else bus.timeOfDeparture - train.mainTime
                        deltaHours = delta.seconds // 3600
                        if deltaHours == 0 and delta.days == 0 and not delta.seconds == 0:
                            trainsForBus.append(train)
                        elif delta.days == 0 and delta.seconds == 0 and directionBuses == '–î—É–±–∫–∏-–û–¥–∏–Ω—Ü–æ–≤–æ':
                            trainsForBus.append(train)
                    if len(trainsForBus) > 3:
                        if directionTrains == '–ú–æ—Å–∫–≤–∞-–û–¥–∏–Ω—Ü–æ–≤–æ':
                            bus.trains = trainsForBus[-1:-4:-1]
                            bus.trains.reverse()
                        elif directionTrains == '–û–¥–∏–Ω—Ü–æ–≤–æ-–ú–æ—Å–∫–≤–∞':
                            bus.trains = trainsForBus[:3]
                    else:
                        bus.trains = trainsForBus
                    for train in bus.trains:
                        if len(train.buses[bus.weekday]) < 3:
                            train.buses[bus.weekday].append(bus)

    def firstSetup(self):
        """ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º –¥–µ–ø–ª–æ–µ –Ω–∞ Heroku.
            –ó–∞—Å–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è, –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π, –∏
            –∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–≤–∞ –ø–æ–±–æ—á–Ω—ã—Ö daemon-–ø–æ—Ç–æ–∫–∞, –æ—Ç–≤–µ—á–∞—é—â–∏—Ö –∑–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            –¥–ª—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫ - –∫–∞–∂–¥—ã–π —á–∞—Å, –¥–ª—è –∞–≤—Ç–æ–±—É—Å–æ–≤ - –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤
        """
        print('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...')
        self.busesCurriculum.getPdf()
        print('Pdf-—Ñ–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∞–≤—Ç–æ–±—É—Å–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω...')
        self.busesCurriculum.createCurriculum()
        print('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤ —Å–æ–∑–¥–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ...')
        self.trainsCurriculum.createCurriculum()
        print('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ...')
        self.linkBusesAndTrains()
        print('–ü—Ä–∏–≤—è–∑–∫–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫ –∫ –∞–≤—Ç–æ–±—É—Å–∞–º –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ...')
        self.lastUpdate = today()

        def updateCurriculum():
            with Lock():
                while True:
                    sleep(3600 * 6)
                    if today().hour in (0, 1, 2):
                        sleep(3600 * 3)
                    self.busesCurriculum.getPdf()
                    self.busesCurriculum.createCurriculum()
                    self.trainsCurriculum.createCurriculum()
                    self.linkBusesAndTrains()
                    self.lastUpdate = today()

        updateCurriculumThread = Thread(target=updateCurriculum,
                                        name='updateCurriculum',
                                        daemon=True)
        updateCurriculumThread.start()
        print('–ü–æ—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω...')

        if bool(int((os.getenv('CREATE_DB')))):
            self.createDataBase()
            print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞...')
        else:
            try:
                con = sql.connect(os.getenv('DATABASE_URL'),
                                  sslmode='require')
                con.close()
                print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞...')
            except Exception as e:
                print('–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...')
                print(e)

        print('–ü–µ—Ä–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.')


class Answers:
    def __init__(self):
        self.config = Config()
        self.config.firstSetup()

    def startAnswer(self):
        answer = '''–ü—Ä–∏–≤–µ—Ç, –¥—É–±—á–∞–Ω–∏–Ω!
–Ø –±–æ—Ç, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Å–º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö –∞–≤—Ç–æ–±—É—Å–æ–≤ –∏ —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫.
–î–∞, —Ç–µ–±–µ –Ω–µ –ø—Ä–∏–¥–µ—Ç—Å—è –ª–µ–∑—Ç—å –≤ –≥—Ä—É–ø–ø—É –≤ –í–ö, —è —Å–¥–µ–ª–∞—é —ç—Ç–æ –∑–∞ —Ç–µ–±—è.
–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å–æ –º–Ω–æ–π /help

P.S. –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–∏—Å–∞—Ç—å @eura71'''

    def helpAnswer(self):
        answer = '''–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/buses - —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–±—É—Å–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π —á–∞—Å –∏ —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è –ø–µ—Ä–µ—Å–∞–¥–∫–∏
/slavyanki - —Å–ø–∏—Å–æ–∫ —Å–ª–∞–≤—è–Ω–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/trains - —Å–ø–∏—Å–æ–∫ —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π —á–∞—Å
/file - PDF-—Ñ–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º'''
        return answer

    def busesAnswer(self, direction: str):
        buses = self.config.busesCurriculum.getBusesForHour(direction)
        if len(buses) == 0:
            answer = '–ê–≤—Ç–æ–±—É—Å–æ–≤ –≤ –±–ª–∏–∂–∞–π—à–∏–π —á–∞—Å –Ω–µ—Ç :('
        else:
            answer = '–ê–≤—Ç–æ–±—É—Å—ã –æ—Ç –î—É–±–∫–æ–≤ –¥–æ –û–¥–∏–Ω—Ü–æ–≤–æ:\n' if direction=='–î—É–±–∫–∏-–û–¥–∏–Ω—Ü–æ–≤–æ' \
                else '–ê–≤—Ç–æ–±—É—Å—ã –æ—Ç –û–¥–∏–Ω—Ü–æ–≤–æ –¥–æ –î—É–±–∫–æ–≤:\n'
            for bus in buses:
                answer += '\n{}\n'.format(bus)
            answer += '\n–í—Å–µ —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∏ /trains'
        return answer

    def slavyankiAnswer(self, direction):
        slavyanki = self.config.busesCurriculum.getSlavyanki(direction)
        if len(slavyanki) == 0:
            answer = '–°–ª–∞–≤—è–Ω–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç :('
        else:
            answer = '–ê–≤—Ç–æ–±—É—Å—ã –æ—Ç –î—É–±–∫–æ–≤ –¥–æ –°–ª–∞–≤—è–Ω—Å–∫–æ–≥–æ –±—É–ª—å–≤–∞—Ä–∞' if direction == '–î—É–±–∫–∏-–û–¥–∏–Ω—Ü–æ–≤–æ' \
                else '–ê–≤—Ç–æ–±—É—Å—ã –æ—Ç –°–ª–∞–≤—è–Ω—Å–∫–æ–≥–æ –±—É–ª—å–≤–∞—Ä–∞ –¥–æ –î—É–±–∫–æ–≤'
            for slavyanka in slavyanki:
                answer += '\n{}\n'.format(slavyanka)
        return answer

    def trainsAnswer(self, direction):
        trains = self.config.trainsCurriculum.getTrainsForHour(direction)
        if len(trains) == 0:
            answer = '–≠–ª–µ–∫—Ç—Ä–∏—á–µ–∫ –≤ –±–ª–∏–∂–∞–π—à–∏–π —á–∞—Å –Ω–µ—Ç :('
        else:
            grammarForStations = {'–û–¥–∏–Ω—Ü–æ–≤–æ-–ö—É–Ω—Ü–µ–≤–æ': '–æ—Ç –û–¥–∏–Ω—Ü–æ–≤–æ –¥–æ –ö—É–Ω—Ü–µ–≤–æ',
                                  '–û–¥–∏–Ω—Ü–æ–≤–æ-–§–∏–ª–∏': '–æ—Ç –û–¥–∏–Ω—Ü–æ–≤–æ –¥–æ –§–∏–ª–µ–π',
                                  '–û–¥–∏–Ω—Ü–æ–≤–æ-–ë–µ–≥–æ–≤–∞—è': '–æ—Ç –û–¥–∏–Ω—Ü–æ–≤–æ –¥–æ –ë–µ–≥–æ–≤–æ–π',
                                  '–û–¥–∏–Ω—Ü–æ–≤–æ-–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –≤–æ–∫–∑–∞–ª': '–æ—Ç –û–¥–∏–Ω—Ü–æ–≤–æ –¥–æ –ë–µ–ª–æ—Ä—É—Å—Å–∫–æ–≥–æ –≤–æ–∫–∑–∞–ª–∞',
                                  '–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –≤–æ–∫–∑–∞–ª-–û–¥–∏–Ω—Ü–æ–≤–æ': '–æ—Ç –ë–µ–ª–æ—Ä—É—Å—Å–∫–æ–≥–æ –≤–æ–∑–∫–∞–ª–∞ –¥–æ –û–¥–∏–Ω—Ü–æ–≤–æ',
                                  '–ë–µ–≥–æ–≤–∞—è-–û–¥–∏–Ω—Ü–æ–≤–æ': '–æ—Ç –ë–µ–≥–æ–≤–æ–π –¥–æ –û–¥–∏–Ω—Ü–æ–≤–æ',
                                  '–§–∏–ª–∏-–û–¥–∏–Ω—Ü–æ–≤–æ': '–æ—Ç –§–∏–ª–µ–π –¥–æ –û–¥–∏–Ω—Ü–æ–≤–æ',
                                  '–ö—É–Ω—Ü–µ–≤–æ-–û–¥–∏–Ω—Ü–æ–≤–æ': '–æ—Ç –ö—É–Ω—Ü–µ–≤–æ –¥–æ –û–¥–∏–Ω—Ü–æ–≤–æ'}
            answer = '–≠–ª–µ–∫—Ç—Ä–∏—á–∫–∏ {}:\n'.format(grammarForStations[direction])
            for train in trains:
                answer += '\n{}\n'.format(train)
            answer += '\n–ë–ª–∏–∂–∞–π—à–∏–µ –∞–≤—Ç–æ–±—É—Å—ã /buses'
        return answer


class Admin:
    def __init__(self, myID=281452837):
        self.id = myID

    def checkUpdates(self, answers: Answers):
        """ –û—Ç–≤–µ—Ç –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å–∫—Ä—ã—Ç—É—é –∫–æ–º–∞–Ω–¥—É, –¥–æ—Å—Ç—É–ø–Ω—É—é —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É,
            /check_updates - –≤—ã–¥–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫ –∏ –∞–≤—Ç–æ–±—É—Å–æ–≤
        """
        answer = '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: *{}:{} {}*'.\
            format(answers.config.lastUpdate.hour,
                   answers.config.lastUpdate.minute,
                   answers.config.lastUpdate.strftime('%d.%m.%Y'))
        return answer

    def userData(self, userID: int, func: str):
        """ –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö,
            –¥–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É FULL_STATISTICS –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ–±—â–µ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –∏
            —Ç–∞–±–ª–∏—Ü—É USERS_STATISTICS –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        now = today().strftime('%d.%m.%Y')
        con = sql.connect(os.getenv('DATABASE_URL'),
                          sslmode='require')
        cur = con.cursor()
        # —Ä–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π full_statistics
        funcs = {'start': 1,
                 'help': 2,
                 'buses': 3,
                 'slavyanki': 4,
                 'trains': 5,
                 'file': 6,
                 'total': 7}
        cur.execute('SELECT * from FULL_STATISTICS WHERE date LIKE \'{}\';'.
                    format(now))
        rows = cur.fetchall()
        if len(rows) == 0:
            cur.execute('INSERT INTO FULL_STATISTICS (date, start_calls, help_calls, buses_calls, slavyanki_calls, trains_calls, file_calls, total_calls) VALUES (\'{}\', {}, {}, {}, {}, {}, {}, {});'.
                format(now, 0, 0, 0, 0, 0, 0, 0))
            con.commit()
            cur.execute('SELECT * from FULL_STATISTICS WHERE date LIKE \'{}\';'.
                format(now))
            rows = cur.fetchall()
        cur.execute('UPDATE FULL_STATISTICS set {}_calls = {} where date LIKE \'{}\';'.
            format(func, int(rows[0][funcs[func]]) + 1, now))
        cur.execute('UPDATE FULL_STATISTICS set total_calls = {} where date LIKE \'{}\';'.
            format(rows[0][funcs['total']] + 1, now))
        con.commit()
        # —Ä–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π users_statistics
        cur.execute('SELECT * from USERS_STATISTICS WHERE id = {}'.
                    format(userID))
        rows = cur.fetchall()
        if len(rows) == 0:
            cur.execute('INSERT INTO USERS_STATISTICS (id, start_date, total_calls) VALUES ({}, \'{}\', {});'.
                format(userID, now, 0))
            con.commit()
            cur.execute('SELECT * from USERS_STATISTICS WHERE id = {}'.
                        format(userID))
            rows = cur.fetchall()
        cur.execute('UPDATE USERS_STATISTICS set lastcall_date = \'{}\' WHERE id = {};'.
            format(now, userID))
        cur.execute('UPDATE USERS_STATISTICS set total_calls = {} WHERE id = {};'.
                    format(int(rows[0][3]) + 1, userID))
        con.commit()
        con.close()

    @staticmethod
    def createStatisticsXcl():
        """ –í—ã–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Postgresql (–Ω–∞ Heroku) –∏
        —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–µ –≤ —Ñ–∞–π–ª statistics.xlsx –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å
        –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É, –¥–æ—Å—Ç—É–ø–Ω—É—é —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É, /get_statistics
        """
        wb = xl.workbook.Workbook()
        wb.active.title = 'full_statistics'
        wb.create_sheet('users_statistics', 1)
        con = sql.connect(os.getenv('DATABASE_URL'),
                          sslmode='require')
        cur = con.cursor()
        # —Ä–∞–±–æ—Ç–∞ —Å full_statistics
        fullStatisticsSheet = wb['full_statistics']
        names = {'A1': 'date',
                 'B1': 'start_calls',
                 'C1': 'help_calls',
                 'D1': 'buses_calls',
                 'E1': 'slavyanki_calls',
                 'F1': 'trains_calls',
                 'G1': 'file_calls',
                 'H1': 'total_calls'}
        for elem in names:
            fullStatisticsSheet[elem] = names[elem]
        cur.execute('SELECT * FROM FULL_STATISTICS;')
        rows = cur.fetchall()
        for i in range(len(rows)):
            for j in range(len(rows[i])):
                fullStatisticsSheet.cell(row=i + 2, column=j + 1).value = rows[i][j]
        # —Ä–∞–±–æ—Ç–∞ —Å users_statistics
        usersStatisticsSheet = wb['users_statistics']
        names = {'A1': 'id',
                 'B1': 'start_date',
                 'C1': 'lastcall_date',
                 'D1': 'total_calls'}
        for elem in names:
            usersStatisticsSheet[elem] = names[elem]
        cur.execute('SELECT * FROM USERS_STATISTICS;')
        rows = cur.fetchall()
        for i in range(len(rows)):
            for j in range(len(rows[i])):
                usersStatisticsSheet.cell(row=i + 2, column=j + 1).value = rows[i][j]
        con.close()
        wb.save('statistics.xlsx')
